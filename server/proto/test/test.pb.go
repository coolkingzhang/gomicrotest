// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	User
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id           int32  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	UserName     string `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	UserPassword string `protobuf:"bytes,3,opt,name=UserPassword" json:"UserPassword,omitempty"`
	Remarks      string `protobuf:"bytes,4,opt,name=Remarks" json:"Remarks,omitempty"`
	Flag         bool   `protobuf:"varint,5,opt,name=Flag" json:"Flag,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetUserPassword() string {
	if m != nil {
		return m.UserPassword
	}
	return ""
}

func (m *User) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

func (m *User) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func init() {
	proto.RegisterType((*User)(nil), "User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TestUser service

type TestUserClient interface {
	GetAll(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	GetUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
}

type testUserClient struct {
	c           client.Client
	serviceName string
}

func NewTestUserClient(serviceName string, c client.Client) TestUserClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "testuser"
	}
	return &testUserClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *testUserClient) GetAll(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.serviceName, "TestUser.GetAll", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testUserClient) GetUser(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.serviceName, "TestUser.GetUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestUser service

type TestUserHandler interface {
	GetAll(context.Context, *User, *User) error
	GetUser(context.Context, *User, *User) error
}

func RegisterTestUserHandler(s server.Server, hdlr TestUserHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&TestUser{hdlr}, opts...))
}

type TestUser struct {
	TestUserHandler
}

func (h *TestUser) GetAll(ctx context.Context, in *User, out *User) error {
	return h.TestUserHandler.GetAll(ctx, in, out)
}

func (h *TestUser) GetUser(ctx context.Context, in *User, out *User) error {
	return h.TestUserHandler.GetUser(ctx, in, out)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x6a, 0x61, 0xe4, 0x62, 0x09, 0x2d, 0x4e, 0x2d, 0x12,
	0xe2, 0xe3, 0x62, 0xf2, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x62, 0xf2, 0x4c, 0x11,
	0x92, 0xe2, 0xe2, 0x00, 0x89, 0xfb, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06,
	0xc1, 0xf9, 0x42, 0x4a, 0x5c, 0x3c, 0x20, 0x76, 0x40, 0x62, 0x71, 0x71, 0x79, 0x7e, 0x51, 0x8a,
	0x04, 0x33, 0x58, 0x1e, 0x45, 0x4c, 0x48, 0x82, 0x8b, 0x3d, 0x28, 0x35, 0x37, 0xb1, 0x28, 0xbb,
	0x58, 0x82, 0x05, 0x2c, 0x0d, 0xe3, 0x0a, 0x09, 0x71, 0xb1, 0xb8, 0xe5, 0x24, 0xa6, 0x4b, 0xb0,
	0x2a, 0x30, 0x6a, 0x70, 0x04, 0x81, 0xd9, 0x46, 0xf6, 0x5c, 0x1c, 0x21, 0xa9, 0xc5, 0x25, 0x60,
	0x97, 0x48, 0x70, 0xb1, 0xb9, 0xa7, 0x96, 0x38, 0xe6, 0xe4, 0x08, 0xb1, 0xea, 0x81, 0x04, 0xa4,
	0x20, 0x94, 0x12, 0x83, 0x90, 0x24, 0x17, 0xbb, 0x7b, 0x2a, 0x44, 0x11, 0x9a, 0x54, 0x12, 0x1b,
	0xd8, 0x3b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x3c, 0x88, 0x1b, 0xdc, 0x00, 0x00,
	0x00,
}
